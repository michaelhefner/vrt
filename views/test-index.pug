doctype html
head
    meta(charset='utf-8')
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    meta(http-equiv='Cache-Control' content='no-cache, no-store, must-revalidate')
    meta(http-equiv='Pragma' content='no-cache')
    meta(http-equiv='Expires' content='0')
    title Testing Report
    link(rel='stylesheet', href='/stylesheets/style.css')
    style.
        @font-face {
            font-family: 'latoregular';
            src: url('assets/fonts/lato-regular-webfont.woff2') format('woff2'),
            url('assets/fonts/lato-regular-webfont.woff') format('woff');
            font-weight: 400;
            font-style: normal;
        }
        @font-face {
            font-family: 'latobold';
            src: url('assets/fonts/lato-bold-webfont.woff2') format('woff2'),
            url('assets/fonts/lato-bold-webfont.woff') format('woff');
            font-weight: 700;
            font-style: normal;
        }
        .ReactModal__Body--open {
            overflow: hidden;
        }
        .ReactModal__Body--open .header {
            display: none;
        }
    include navbar
#root

    #loading 
        h1 Loading Report
script.
    function report (report) { // eslint-disable-line no-unused-vars
        window.tests = report;
    }
    const loadInterval = setInterval(loading, 2000);

    function loading() {
        let currentCount = parseInt(location.href.slice(location.href.indexOf('?')+1));
        let currentUrl = location.href.indexOf('?') !== -1 ? location.href.slice(0, location.href.indexOf('?')+1) : location.href;
        let setUrl = currentUrl;
        if (isNaN(currentCount)) {
            currentCount = 1;
            setUrl += '?'
        } else {
            currentCount++;
        }
        if (!#{exists}) {
            location.href = `${setUrl + currentCount}`;
        } else {
            clearInterval(loadInterval);
        }
    }
script(src='config.js')
script(src='index_bundle.js')
