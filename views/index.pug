extends layout

block content
    if user
        div(style="display: flex; flex-direction: row")
            div(style="margin: 3rem auto; max-width: 70%")
                h2 Ready To Run a New Test?
                p.m-l-5 Click on 'New Test' button in the main navigation.
                
            div(style="margin: 3rem auto; max-width: 70%")
                h2 Or Look at an Existing Test?
                p.m-l-5 Click on 'View Test' in the main navigation.
        canvas#avg-mismatch(style="width:100%;height: 100%; min-height: 400px;")
        canvas#avg-analysis-time(style="width:100%;height: 100%; min-height: 400px;")
    
    div(style="margin: 2rem 0;")
        h1 Welcome
        p Regression testing is a part of every Quality Assurance process.  
        p Visual regression testing can be a lengthly burden, why not automate it?
    div(style="width: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center;")
        h2 Creating a test is easy 
        p From the New Test page
        ol(style="list-style-type: decimal; padding: .5rem 2rem;")
            li(style="list-style-type: decimal;") 
                p Enter a discriptive ID 
            li(style="list-style-type: decimal;") 
                p Enter your reference or control URL, and your test URL 
                img(src='./images/test_setup_1.jpg' height='450' width='1000')
            li(style="list-style-type: decimal;") 
                p Select any additional config options (optional)
            li(style="list-style-type: decimal;") 
                p Click "Set Reference" and wait for that test to finish
            li(style="list-style-type: decimal;") 
                p Click "Run Test"
                img(src='./images/test_setup_2.jpg' height='450' width='1000')
        h2 Check out the homepage analytics!    
        img(src='./images/screenshot.jpg' height='450' width='1000')
    
    script. 
        const postData = async (url = '', data = {}) => {
            const response = await fetch(url, {
                method: 'POST', 
                mode: 'cors',  
                cache: 'no-cache',  
                credentials: 'same-origin',  
                headers: {
                    'Content-Type': 'application/json'
                },
                redirect: 'follow',  
                referrerPolicy: 'no-referrer',  
                body: JSON.stringify(data) 
            });
            return response.json();  
        }
        postData('/report/get-avg-mismatch')
        .then((data) => {
            const labels = data.map(d => `${d.viewport}`);
            const chartData = data.map(cd => cd.avg);
            const ctx = document.getElementById('avg-mismatch');
            const displayData = {
            labels: labels,
            datasets: [{
                axis: 'y',
                label: 'Avg Mis-Match Percentage',
                data: chartData,
                fill: false,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgb(255, 99, 132)',
                borderWidth: 1
            }]
            };
            new Chart(ctx, {
                type: 'bar',
                data: displayData,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                fontSize: 18
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                fontSize: 18
                            }
                        }]
                    }
                }
            });
        });
        
        postData('/report/get-avg-analysis')
        .then((data) => {
            const labels = data.map(d => `${d.viewport}`);
            const chartData = data.map(cd => cd.avg_analysis_time);
            const ctx = document.getElementById('avg-analysis-time');
            const displayData = {
            labels: labels,
            datasets: [{
                axis: 'y',
                label: 'Avg Analysis Time',
                data: chartData,
                fill: false,
                backgroundColor: 'rgba(65, 105, 225, 0.2)',
                borderColor: 'rgba(65, 105, 225, 1)',
                borderWidth: 1
            }]
            };
            new Chart(ctx, {
                type: 'bar',
                data: displayData,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                fontSize: 18
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                fontSize: 18
                            }
                        }]
                    }
                }
            });
        });